'use strict';
import {UserNotFoundError, UserNotLoggedInError, SessionExpiredError, SessionCredentialsNotMatchingError} from './../errors';
import {logger} from './../../config';
import Users from './../../users/model';
import Roles from './../../users/roles/model';
export let register = function register(server, options, next) {
    // this is being done to prevent users and roles fom creating indexes before mongo connections have been established
    server.connections.forEach(connection => {
        connection.auth.strategy('simple', 'basic', {
            validateFunc(request, email, sessionkey, callback) {
                Users.findBySessionCredentials(email, sessionkey)
                    .then(user => {
                        logger.info(['auth'], {user: email, success: true});
                        Roles.find({name: {$in: user.roles}, organisation: user.organisation})
                            .then(roles => {
                                user._roles = roles;
                                callback(null, true, {user});
                            });
                    })
                    .catch(UserNotFoundError,
                    UserNotLoggedInError,
                    SessionExpiredError,
                    SessionCredentialsNotMatchingError,
                    err => {
                        callback(err.i18nError('en'), false);
                    })
                    .catch(err => {
                        logger.info(['auth', 'error'], {user: email, success: false, error: JSON.stringify(err)});
                        callback(null, false);
                    });
            }
        });
    });
    return next();
};
register.attributes = {
    name: 'auth'
};
