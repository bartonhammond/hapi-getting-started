'use strict';
import path from 'path';
import Bluebird from 'bluebird';
import {sendEmail} from './../common/plugins/mailer';
import {PasswordResetError} from './../common/errors';
import {ip, buildQueryForPartialMatch, logAndBoom} from './../common/utils';
import {uniqueCheck, findValidator, canView, canUpdate, onlyOwner, prePopulate} from './../common/prereqs';
import {buildCreateHandler, buildFindHandler, buildFindOneHandler, buildUpdateHandler} from './../common/handlers';
import Config from './../config';
import schemas from './schemas';
import Users from './model';

export default {
    signup: {
        validate: schemas.controller.signup,
        pre: [
            uniqueCheck(Users, (request) => {
                return {
                    email: request.payload.email,
                    organisation: request.payload.organisation
                };
            })
        ],
        handler: buildCreateHandler(Users, (request) => {
            let {email, password, organisation, locale} = request.payload;
            let ipadrs = ip(request);
            return Users.create(email, organisation, password, locale)
                .then(user => user.loginSuccess(ipadrs, user.email).save())
                .then(user => {
                    let options = {
                        subject: 'Your ' + Config.projectName + ' account',
                        to: {
                            name: request.payload.email,
                            address: email
                        }
                    };
                    /*jshint unused:false*/
                    /*eslint-disable no-unused-vars*/
                    return Bluebird.join(user.afterLogin(ipadrs),
                        sendEmail(options, path.join(__dirname, '/templates/welcome.hbs.md'), request.payload),
                        (user1, m) => user1
                    );
                    /*eslint-enable no-unused-vars*/
                    /*jshint unused:true*/
                });
        })
    },
    find: {
        validate: findValidator(schemas.controller.find),
        pre: [
            canView(Users.collection)
        ],
        handler: buildFindHandler(Users, (request) => buildQueryForPartialMatch({}, request, [['email', 'email']]),
            (output) => {
                output.data = output.data.map((user) => user.stripPrivateData());
                return output;
            })
    },
    findOne: {
        pre: [
            canView(Users.collection),
            prePopulate(Users, 'id'),
            onlyOwner(Users)
        ],
        handler: buildFindOneHandler(Users)
    },
    update: {
        validate: schemas.controller.update,
        pre: [
            canUpdate(Users.collection),
            prePopulate(Users, 'id'),
            onlyOwner(Users)
        ],
        handler: buildUpdateHandler(Users, (usr, request, e) => usr._invalidateSession(ip(request), e).updateUser(request, e))
    },
    loginForgot: {
        validate: schemas.controller.loginForgot,
        handler: (request, reply) => {
            Users.findOne({email: request.payload.email})
                .then(user => user ? user.resetPasswordSent(user.email).save() : user)
                .then(user => {
                    if (user) {
                        let options = {
                            subject: 'Reset your ' + Config.projectName + ' password',
                            to: request.payload.email
                        };
                        return sendEmail(options, path.join(__dirname, '/templates/forgot-password.hbs.md'), {key: user.resetPwd.token});
                    }
                    return undefined;
                })
                .then(() => reply({message: 'Success.'}))
                .catch(err => {
                    logAndBoom(err, reply);
                });
        }
    },
    loginReset: {
        validate: schemas.controller.loginReset,
        handler: (request, reply) => {
            Users.findOne({email: request.payload.email, 'resetPwd.expires': {$gt: Date.now()}})
                .then(user => {
                    if (!user || (request.payload.key !== user.resetPwd.token)) {
                        return Bluebird.reject(new PasswordResetError());
                    }
                    return user._invalidateSession(ip(request), user.email).setPassword(request.payload.password, user.email).save();
                })
                .then(() => reply({message: 'Success.'}))
                .catch(err => {
                    logAndBoom(err, reply);
                });
        }
    }
};
